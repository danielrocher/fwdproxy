#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Written by Daniel Rocher <daniel.rocher@resydev.fr>
# Copyright (C) 2018

from include import server, logs
import signal, sys, os, configparser, getopt
from include.global_env import Global


__author__ = "Daniel Rocher <daniel.rocher@resydev.fr>"
__version__ = Global.version_fwdproxyd
__date__ = Global.date_fwdproxyd
__copyright__ = "Copyright (c) 2018 Daniel Rocher"
__license__ = "GPL Version 3"


def signal_handler(signal, frame):
    Global.debug("Stop fwdproxyd , please wait ...")
    my_server.stop()
    sys.exit(0)


def daemonize():
    """daemonize server (run as server)"""
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
    except OSError as e:
        Global.error("fork failed: {0} ({1})".format(e.errno, e.strerror))
        sys.exit(1)


def validatePort(port):
    """Return False if TCP port is not valid"""
    if port < 20 or port > 49151:
        Global.error("available port : > 20 and < 49152. Use default port.")
        return False
    return True

def readConfigFile(config_filename):
    def getConfigValue(mConfig, section, key, default="", typ=str):
        if mConfig.has_option(section, key):
            if typ==str:
                return mConfig.get(section, key)
            elif typ==int:
                try:
                    return int(mConfig.get(section, key))
                except:
                    pass
            elif typ==bool:
                try:
                    return mConfig.getboolean(section, key)
                except:
                    pass
    
        return default

    config = configparser.ConfigParser()

    if not os.path.isfile(config_filename):
        Global.error("Impossible to read configuration file. Use default settings")
        return

    config.read(config_filename)

    port=getConfigValue(config,"Global","port", Global.default_port_server, int)

    if validatePort(port):
        if not Global.current_port_server: # if not changed by command line
            Global.current_port_server=port

    Global.proxy=getConfigValue(config,"Global", "proxy", Global.proxy, str)

    if not Global.filename_bkl: # if not changed by command line
        Global.filename_bkl=getConfigValue(config,"Filtering","blocklist_domain_filename")

    if not Global.filename_allw: # if not changed by command line
        Global.filename_allw=getConfigValue(config,"Filtering","allowlist_domain_filename")

    Global.filter_policy=getConfigValue(config,"Filtering","filter_policy", Global.filter_policy, int)
    Global.enable_redirect=getConfigValue(config,"Filtering","enable_redirect", Global.enable_redirect, bool)
    Global.template_file_redirect=getConfigValue(config,"Filtering","template_file_redirect",Global.template_file_redirect)
    Global.url_redirect=getConfigValue(config,"Filtering","url_redirect", Global.url_redirect)

    # Logging
    Global.syslog=getConfigValue(config,"Logging","syslog", Global.syslog, bool)
    Global.logfilename=getConfigValue(config,"Logging","logfilename", Global.logfilename)
    Global.maxbytes=getConfigValue(config,"Logging","maxbytes", Global.maxbytes, int)
    Global.backupcount=getConfigValue(config,"Logging","backupcount", Global.backupcount, int)
    Global.logconnect=getConfigValue(config,"Logging","logconnect", Global.logconnect, bool)
    Global.logblocked=getConfigValue(config,"Logging","logblocked", Global.logblocked, bool)

if __name__ == "__main__":
    #  intercept the signals (kill)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGQUIT, signal_handler)

    # help message (option --help)
    usage="\n\tUsage:  {0} -c <filename> -d -m -p <port> -v --help\n\n" \
        "\t-h| --help :    Show this help\n" \
        "\t-d :            Daemonize\n" \
        "\t-c <filename> : Configuration filename\n" \
        "\t-b <filename> : Domain blocklist file\n" \
        "\t-a <filename> : Domain allowlist file\n" \
        "\t-p <port> :     TCP port - default = {1}\n" \
        "\t-v| --version : Show {0} version\n" \
        "\t-m :            Show debug messages\n\n".format(Global.progname, Global.default_port_server)

    args=sys.argv[1:]
    try:
        opts, args = getopt.getopt(args, "hvc:dp:vmb:w:", ["help", "version"])
    except getopt.GetoptError as err:
        print ("\n",err)
        print (usage)
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print (usage)
            sys.exit()
        if opt in ("-p"):
            try:
                port=int(arg)
            except:
                port=Global.current_port_server
            if validatePort(port):
                Global.current_port_server=port
        if opt in ("-d"):
            Global.daemonize=True
        if opt in ("-b"):
            Global.filename_bkl=arg
        if opt in ("-a"):
            Global.filename_allw=arg
        if opt in ("-c"):
            Global.config_filename=arg
        if opt in ("-m"):
            Global.debug_fwdproxy=True
        elif opt in ("-v","--version"):
            print ("{} - version : {}".format(Global.progname, Global.version_fwdproxyd))
            sys.exit()

    # read configuration file
    readConfigFile(Global.config_filename)

    if not Global.current_port_server:
        Global.current_port_server=Global.default_port_server

    my_server=server.Server(Global.current_port_server, Global.proxy, Global.filename_bkl, \
                            Global.filename_allw, Global.filter_policy, Global.debug_fwdproxy)

    if Global.enable_redirect: # if enable redirect for blocked domains
        my_server.enableRedirectForBlockListDomain(Global.template_file_redirect, Global.url_redirect)

    if Global.daemonize:
        daemonize()

    # Logging
    logging=logs.Logs(Global.syslog, Global.logfilename, Global.maxbytes, Global.backupcount, Global.logconnect, Global.logblocked)
    my_server.setCallBackLogConnect(logging.logConnect)
    my_server.setCallBackLogBlocked(logging.logBlocked)
    my_server.setCallBackLogServices(logging.logServices)
    
    # start server
    my_server.start()


